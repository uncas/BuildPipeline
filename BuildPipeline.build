<?xml version="1.0"?>
<project name="BuildPipeline" default="build">

  <!-- Configuration - default values that can be changed depending on the situation, can be changed in local.properties.xml -->
  <property name="configuration" value="Release" />
  <property name="version.major" value="0" />
  <property name="version.minor" value="1" />
  <property name="version.build" value="0" />

  <!-- External executable locations - depends on environment, can be changed in local.properties.xml -->
  <property name="msbuild" value="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\msbuild.exe" />

  <!-- Working values and built-in values - need not be changed -->
  <property name="nant.dir" value="C:\Program Files (x86)\nant" />
  <property name="nant.executable" value="${nant.dir}\nant.exe" />
  <property name="nunit.dir" value="packages\NUnit.Runners.2.6.0.12051\tools" />
  <property name="nunit.executable" value="${nunit.dir}\nunit-console.exe" />
  <property name="output.dir" value="${project::get-base-directory()}\build" />

  <!-- Local properties, that overrides the ones from above -->
  <if test="${file::exists('local.properties.xml')}">
    <echo message="Loading local.properties.xml" />
    <include buildfile="local.properties.xml" />
  </if>

  <!-- Default values for properties that have not been assigned a value: --> 
  <if test="${not property::exists('build.step')}">
    <property name="build.step" value="" />
  </if>


  <target name="all" />

  <target name="cleanProject">
    <delete dir="${projectFolder}\bin" failonerror="false" />
    <delete dir="${projectFolder}\obj" failonerror="false" />
  </target>

  <target name="clean" failonerror="false">
    <delete dir="${output.dir}" failonerror="false" />
    <property name="projectFolder" value="src\Uncas.BuildPipeline.Web" />
    <call target="cleanProject" />
    <property name="projectFolder" value="test\Uncas.BuildPipeline.Tests.Unit" />
    <call target="cleanProject" />
    <property name="projectFolder" value="test\Uncas.BuildPipeline.Tests.Integration" />
    <call target="cleanProject" />
  </target>

  <target name="init" depends="clean">
    <delete dir="${output.dir}" />
    <mkdir dir="${output.dir}" />
  </target>

  <target name="build"
      depends="init,generateVersionInfoFile"
      description="compiles (msbuild) the solution (.sln file)">
    <exec program="${msbuild}"
        commandline="/p:Configuration=${configuration} Uncas.BuildPipeline.sln" />
  </target>

  <target name="test" depends="unitTest" />

  <target name="unitTest" depends="build,unitTestProperties">
    <call target="baseTest" />
  </target>
  <target name="unitTestProperties">
    <property
      name="TestProjectName"
      value="Uncas.BuildPipeline.Tests.Unit" />
  </target>

  <target name="baseTest">
    <property name="TestAssemblyDirectoryPath" value="test\${TestProjectName}\bin\${configuration}" />
    <property name="TestAssemblyFileName" value="${TestProjectName}.dll" />
    <property name="TestResultFileName" value="${TestProjectName}.TestResult.xml" />
    <property name="test.directory" value="${output.dir}\test" />
    <copy todir="${test.directory}">
      <fileset basedir="${TestAssemblyDirectoryPath}">
        <include name="*.*" />
      </fileset>
    </copy>
    <copy todir="${test.directory}">
      <fileset basedir="${nunit.dir}">
        <include name="**\*.*" />
      </fileset>
    </copy>
    <echo message="Testing ${TestProjectName}" />
    <exec program="${test.directory}\nunit-console.exe"
      workingdir="${test.directory}"
      commandline="${TestAssemblyFileName} /framework=4.0.30319 /xml=${TestResultFileName}">
    </exec>
    <if test="${property::exists('CCNetArtifactDirectory')}">
      <copy file="${test.directory}\${TestResultFileName}" 
        todir="${CCNetArtifactDirectory}\testresults" overwrite="true" />
    </if>
  </target>

  <target name="getRevision" depends="init">
    <!-- Retrieve revision number -->
    <echo message="Retrieving revision number" />
    <property name="version.revision" value="0" />
    <property name="file.contents" value="0" />
    <property name="git.hash" value="0" />
    <echo message="hash of the commit is ${git.hash}"/>
  </target>

  <target name="generateVersionInfoFile" depends="getRevision">
    <if test="${property::exists('CCNetLabel')}">
      <property name="version.build" value="${CCNetLabel}" />
    </if>
    <property name="version.string" value="${version.major}.${version.minor}.${version.build}.${version.revision}" />
    <asminfo output="src\VersionInfo.cs" language="CSharp">
      <attributes>
        <attribute type="System.Reflection.AssemblyCompanyAttribute" value="Uncas" />
        <attribute type="System.Reflection.AssemblyProductAttribute" value="Uncas.BuildPipeline" />
        <attribute type="System.Reflection.AssemblyCopyrightAttribute" value="Copyright (c) 2012, Ole Lynge Soerensen" />
        <attribute type="System.Reflection.AssemblyVersionAttribute" value="${version.string}" />
        <attribute type="System.Reflection.AssemblyFileVersionAttribute" value="${version.string}" />
        <attribute type="System.Reflection.AssemblyInformationalVersionAttribute" value="${version.string} (${git.hash})" />
      </attributes>
    </asminfo>
  </target>

  <target name="PrepareCommit" depends="test">
    <echo message="Build and unit tests says OK!" />
  </target>

  <target name="packageTestProject">
    <copy todir="${package.dir}\tests\${ProjectName}">
      <fileset basedir="test\${ProjectName}\bin\${configuration}">
        <include name="*.*" />
        <exclude name="*.pdb" />
      </fileset>
    </copy>
  </target>

  <target name="package" depends="build,unitTest">
    <property name="package.dir" value="${output.dir}\Uncas.BuildPipeline" />

    <property name="web.outdir" value="${package.dir}\apps\Uncas.BuildPipeline.Web" />
    <exec program="${msbuild}">
      <arg value="src\Uncas.BuildPipeline.Web\Uncas.BuildPipeline.Web.csproj" />
      <arg value="/t:ResolveReferences;_CopyWebApplication" />
      <arg value="/p:OutDir=${web.outdir}\bin\;WebProjectOutputDir=${web.outdir}\;Configuration=${configuration}" />
    </exec>

    <property name="windowsService.outdir" value="${package.dir}\apps\Uncas.BuildPipeline.WindowsService" />
    <copy todir="${windowsService.outdir}">
      <fileset basedir="src\Uncas.BuildPipeline.WindowsService\bin\${configuration}">
        <include name="*.*" />
        <exclude name="*.pdb" />
        <exclude name="*.xml" />
      </fileset>
    </copy>

    <property name="ProjectName" value="Uncas.BuildPipeline.Tests.Unit" />
    <call target="packageTestProject" />

    <property name="ProjectName" value="Uncas.BuildPipeline.Tests.Integration" />
    <call target="packageTestProject" />

    <copy todir="${package.dir}\tools\NUnit">
      <fileset basedir="${nunit.dir}">
        <include name="**\*.*" />
      </fileset>
    </copy>

    <copy file="scripts\BuildActions.build" todir="${package.dir}" />
    <copy file="scripts\Deploy.cmd" todir="${package.dir}" />

    <property name="zipfile.path" value="${output.dir}\${zipfile.name}" />
    <zip zipfile="${zipfile.path}">
      <fileset basedir="${package.dir}">
        <include name="**/*" />
      </fileset>
    </zip>
    <if test="${property::exists('CCNetArtifactDirectory')}">
      <copy file="${zipfile.path}" todir="${CCNetArtifactDirectory}\packages" overwrite="true" />
    </if>

    <!--
      <call target="masterPackage" />
    -->
  </target>

  <target name="masterPackage">
    <property name="package.dir" value="${output.dir}\MasterPackage" />
    <copy todir="${package.dir}\NAnt">
      <fileset basedir="${nant.dir}">
        <include name="**\*.*" />
      </fileset>
    </copy>

    <copy file="scripts\UnzipPackage.build" todir="${package.dir}" />

    <property name="zipfile.name" value="MasterPackage.zip" />
    <property name="zipfile.path" value="${output.dir}\${zipfile.name}" />
    <zip zipfile="${zipfile.path}">
      <fileset basedir="${package.dir}">
        <include name="**/*" />
      </fileset>
    </zip>
    <if test="${property::exists('CCNetArtifactDirectory')}">
      <copy file="${zipfile.path}" todir="${CCNetArtifactDirectory}\packages" overwrite="true" />
    </if>
  </target>

  <target name="testPackageTest" depends="package">
    <exec program="${nant.executable}">
      <arg value="-buildfile:build/Uncas.BuildPipeline/BuildActions.build" />
      <arg value="test" />
    </exec>
  </target>

  <target name="deploy" depends="package">
    <exec program="${nant.executable}">
      <arg value="-buildfile:build/Uncas.BuildPipeline/BuildActions.build" />
      <arg value="deploy" />
    </exec>
  </target>

  <target name="logBuild" depends="getRevision"
    if="${property::exists('CCNetIntegrationStatus')}">
    <if test="${not property::exists('package.path')}">
      <property name="package.path" value="" />
    </if>
    <if test="${not property::exists('CCNetIntegrationStatus')}">
      <property name="CCNetIntegrationStatus" value="" />
    </if>
    <echo file="LogBuild.sql">
DECLARE @isSuccessful bit

IF '${CCNetIntegrationStatus}' = 'Success' SET @isSuccessful = 1
ELSE SET @isSuccessful = 0

EXEC stp_Build_Add
    @ProjectName = 'BuildPipeline'
    , @SourceUrlBase = 'http://dev/projects/Uncas.BuildPipeline/'
    , @SourceUrl = 'bla'
    , @SourceRevision = ${revision}
    , @IsSuccessFul = @isSuccessful
    , @StepName = '${build.step}'
    , @BuildNumber = ${version.build}
    , @SourceAuthor = '${author}'
    , @PackagePath = '${package.path}'
    </echo>
    <exec program="sqlcmd">
      <arg value="-S" />
      <arg value=".\SqlExpress" />
      <arg value="-E" />
      <arg value="-d" />
      <arg value="BuildPipeline" />
      <arg value="-i" />
      <arg value="LogBuild.sql" />
    </exec>
  </target>

</project>
